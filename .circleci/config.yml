version: 2.1
orbs:
  ruby: circleci/ruby@1.1.4
  bundle-install: toshimaru/bundle-install@0.3.1

jobs:
  test:  # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 2
    # here we set TWO docker images.
    docker:
      - image: cimg/ruby:2.7.2-browsers # this is our primary docker image, where step commands run.
      - image: circleci/postgres:9.5-alpine
        environment: # add POSTGRES environment variables.
          POSTGRES_USER: circleci-demo-ruby
          POSTGRES_DB: rails_ci_test_test
          POSTGRES_PASSWORD: ""
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      PGHOST: 127.0.0.1
      PGUSER: circleci-demo-ruby
      PGPASSWORD: ""
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - run: gem install bundler:1.17.2
      - bundle-install/bundle-install
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - run:
          name: Running tests
          command: >
            mkdir -p ~/rspec

            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

            bundle exec rspec -r rspec_junit_formatter $TESTFILES --profile 10 --format RspecJunitFormatter --out ~/rspec/results.xml --format progress --color
      - store_test_results:
          path: ~/rspec
workflows:
  version: 2
  test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - test         # Run build first.